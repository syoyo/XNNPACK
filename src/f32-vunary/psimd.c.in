// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["ABS", "NEG", "SQR"]
#include <assert.h>

#include <psimd.h>

#include <xnnpack/common.h>
#include <xnnpack/math.h>
#include <xnnpack/vunary.h>


$PSIMD_OP_F32 = {
$  "ABS": lambda x: "psimd_abs_f32(%s)" % x,
$  "NEG": lambda x: "psimd_neg_f32(%s)" % x,
$  "SQR": lambda x: "psimd_mul_f32(%s, %s)" % (x, x),
$}[OP]
$PARAMS = {
$  "ABS": "const union xnn_f32_abs_params params[restrict XNN_MIN_ELEMENTS(1)]",
$  "NEG": "const union xnn_f32_neg_params params[restrict XNN_MIN_ELEMENTS(1)]",
$  "SQR": "const void* params",
$}[OP]
void xnn_f32_v${OP.lower()}_ukernel__psimd_x${BATCH_TILE}(
    size_t n,
    const float* x,
    float* y,
    ${PARAMS}) XNN_DISABLE_TSAN
{
  assert(n != 0);
  assert(n % sizeof(float) == 0);
  assert(x != NULL);
  assert(y != NULL);

  for (; n >= ${BATCH_TILE} * sizeof(float); n -= ${BATCH_TILE} * sizeof(float)) {
    const psimd_f32 vx${ABC[0:4]} = psimd_load_f32(x);
    $for N in range(4, BATCH_TILE, 4):
      const psimd_f32 vx${ABC[N:N+4]} = psimd_load_f32(x + ${N});
    x += ${BATCH_TILE};

    $for N in range(0, BATCH_TILE, 4):
      const psimd_f32 vy${ABC[N:N+4]} = ${PSIMD_OP_F32("vx" + ABC[N:N+4])};

    psimd_store_f32(y, vy${ABC[0:4]});
    $for N in range(4, BATCH_TILE, 4):
      psimd_store_f32(y + ${N}, vy${ABC[N:N+4]});
    y += ${BATCH_TILE};
  }
  $if BATCH_TILE > 4:
    for (; n >= 4 * sizeof(float); n -= 4 * sizeof(float)) {
      const psimd_f32 vx = psimd_load_f32(x);
      x += 4;

      const psimd_f32 vy = ${PSIMD_OP_F32("vx")};

      psimd_store_f32(y, vy);
      y += 4;
    }
  if XNN_UNLIKELY(n != 0) {
    const psimd_f32 vx = psimd_load_f32(x);
    psimd_f32 vy = ${PSIMD_OP_F32("vx")};
    if (n & (2 * sizeof(float))) {
      psimd_store2_f32(y, vy);
      vy = psimd_concat_hi_f32(vy, vy);
      y += 2;
    }
    if (n & (1 * sizeof(float))) {
      psimd_store1_f32(y, vy);
    }
  }
}
